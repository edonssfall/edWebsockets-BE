version: 2.1

executors:
  python-executor:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/repo

jobs:
  setup:
    docker:
      - image: cimg/python:3.11
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: pip install -r requirements.txt

  test:
    docker:
      - image: cimg/python:3.11
      - image: cimg/postgres:16.2
        environment:
          POSTGRES_USER: $DB_USER
          POSTGRES_DB: $POSTGRES_DB_CHAT
          POSTGRES_PASSWORD: $POSTGRES_PASSWORD
          CHANNEL_HOST: $CHANNEL_HOST
          CHANNEL_SECRET_KEY: $CHANNEL_SECRET_KEY
          DB_HOST: $DB_HOST
          DB_PORT: $DB_PORT
          DB_USER: $DB_USER
          DEBUG: $DEBUG
          DJANGO_SETTINGS_MODULE: $DJANGO_SETTINGS_MODULE
          POSTGRES_DB_CHAT: $POSTGRES_DB_CHAT
          SECRET_KEY: $SECRET_KEY
      - image: cimg/redis:7.2.5
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Wait for Postgres
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m
      - run:
          name: Install dependencies
          command: pip install -r requirements.txt
      - run:
          name: Run tests
          command: python manage.py test

  deploy:
    docker:
      - image: cimg/python:3.11
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli
      - run:
          name: Deploy to AWS
          environment:
            AWS_EC2_HOST: $AWS_EC2_HOST
            SSH_USER: $SSH_USER
            DOCKER_COMPOSE_FILE: $DOCKER_COMPOSE_FILE
            APP_PATH: $APP_PATH
          command: |
            tar -czf - . | ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $SSH_USER@$AWS_EC2_HOST 'cat > ~/app.tar.gz && tar -xzf ~/app.tar.gz -C ~/ && docker-compose -f $DOCKER_COMPOSE_FILE down && docker-compose -f $DOCKER_COMPOSE_FILE up -d'

workflows:
  version: 2
  test-deploy:
    jobs:
      - setup
      - test
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: deploy/prod
